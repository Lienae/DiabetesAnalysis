# 필요한 패키지 로드
library(tidyverse)
library(corrplot)
# 데이터 로드 및 전처리
data <- read.csv("StudentsPerformance.csv")
# 필요한 패키지 로드
library(tidyverse)
library(corrplot)
# 데이터 로드 및 전처리
data <- read.csv("StudentsPerformance.csv")
data$math.score <- as.numeric(data$math.score)
# 부모님의 교육 수준, 점심 유형, 시험 준비 과정을 숫자로 인코딩
data$parental.level.of.education <- as.numeric(as.factor(data$parental.level.of.education))
data$lunch <- as.numeric(as.factor(data$lunch))
data$test.preparation.course <- as.numeric(as.factor(data$test.preparation.course))
# 상관 관계 행렬 계산
cor_matrix <- cor(data[, c("math.score", "parental.level.of.education", "lunch", "test.preparation.course")], use="complete.obs")
# 상관 관계 시각화
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45,
title = "상관 관계 시각화",
addCoef.col = "black") # 상관 계수 추가
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 범주형 변수를 수치형 변수로 변환
# 부모님의 교육 수준: 순서형 변수로 간주, 숫자로 매핑
students$parental_level_of_education <- as.numeric(factor(students$parental_level_of_education,
levels = c("none", "some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 범주형 변수를 수치형 변수로 변환
# 부모님의 교육 수준: 순서형 변수로 간주, 숫자로 매핑
students$parental_level_of_education <- as.numeric(factor(students$parental_level_of_education, levels = c("none", "some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 범주형 변수를 수치형 변수로 변환
# 부모님의 교육 수준: 순서형 변수로 간주, 숫자로 매핑
students$parental_level_of_education <- as.numeric(factor(students$parental_level_of_education, levels = c("none", "some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 범주형 변수를 수치형 변수로 변환
# 부모님의 교육 수준: 순서형 변수로 간주, 숫자로 매핑
students$parental_level_of_education <- as.numeric(factor(students$parental_level_of_education, levels = c("none", "some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 범주형 변수를 수치형 변수로 변환
# 부모님의 교육 수준: 순서형 변수로 간주, 숫자로 매핑
students$parental_level_of_education <- as.numeric(factor(students$parental_level_of_education, levels = c("none", "some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 필요한 패키지 로드
library(tidyverse)
library(corrplot)
# 데이터 로드 및 전처리
data <- read.csv("StudentsPerformance.csv")
data$math.score <- as.numeric(data$math.score)
# 부모님의 교육 수준, 점심 유형, 시험 준비 과정을 숫자로 인코딩
data$parental.level.of.education <- as.numeric(as.factor(data$parental.level.of.education))
data$lunch <- as.numeric(as.factor(data$lunch))
data$test.preparation.course <- as.numeric(as.factor(data$test.preparation.course))
data$parental.level.of.education
data$lunch
data$test.preparation.course
# 상관 관계 행렬 계산
cor_matrix <- cor(data[, c("math.score", "parental.level.of.education", "lunch", "test.preparation.course")], use="complete.obs")
# 상관 관계 시각화
corrplot(cor_matrix, method = "circle", type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45,
title = "상관 관계 시각화",
addCoef.col = "black") # 상관 계수 추가
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 범주형 변수를 수치형 변수로 변환
# 부모님의 교육 수준: 순서형 변수로 간주, 숫자로 매핑
students$parental_level_of_education <- as.numeric(factor(students$parental_level_of_education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 범주형 변수를 수치형 변수로 변환
# 부모님의 교육 수준: 순서형 변수로 간주, 숫자로 매핑
students$parental_level_of_education <- as.numeric(factor(students$parental_level_of_education, levels = c("none", "some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 범주형 변수를 수치형 변수로 변환
# 부모님의 교육 수준: 순서형 변수로 간주, 숫자로 매핑
# "none"이 실제 데이터에 없다고 가정하고, 나머지 레벨은 유지
students$parental_level_of_education <- as.numeric(factor(students$parental_level_of_education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 범주형 변수를 수치형 변수로 변환
# 부모님의 교육 수준: 순서형 변수로 간주, 숫자로 매핑
students$parental_level_of_education <- as.numeric(factor(students$parental_level_of_education,
levels = c("none", "some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 점심 유형: 이진 변수로 변환 ('standard' = 1, 'free/reduced' = 0)
students$lunch <- ifelse(students$lunch == "standard", 1, 0
# 시험 준비 과정: 이진 변수로 변환 ('none' = 0, 'completed' = 1)
students$test_preparation_course <- ifelse(students$test_preparation_course == "none", 0, 1)
students$test_preparation_course <- ifelse(students$test_preparation_course == "none", 0, 1)
students$test_preparation_course <- ifelse(students$test_preparation_course == "completed", 1, 0)
# 시험 준비 과정: 이진 변수로 변환 ('none' = 0, 'completed' = 1)
students$test_preparation_course <- ifelse(students$test_preparation_course == "completed", 1, 0)
# 시험 준비 과정: 이진 변수로 변환 ('none' = 0, 'completed' = 1)
students$test_preparation_course <- ifelse(students$test_preparation_course == "none", 0, 1)
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 고유값 확인
print(unique(students$parental_level_of_education))
print(unique(students$lunch))
print(unique(students$test_preparation_course))
# 고유값 확인 후, 부모님의 교육 수준을 순서형 변수로 변환
# 실제 데이터에 맞는 레벨을 사용
students$parental_level_of_education <- as.numeric(factor(students$parental_level_of_education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 고유값 확인
print(unique(students$parental_level_of_education))
print(unique(students$lunch))
print(unique(students$test_preparation_course))
# 고유값 확인 후, 부모님의 교육 수준을 순서형 변수로 변환
# 실제 데이터에 맞는 레벨을 사용
students$parental_level_of_education <- as.numeric(factor(students$parental_level_of_education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 데이터 프레임의 모든 컬럼 이름 출력
print(colnames(students))
# 고유값 확인
print(unique(students$parental_level_of_education))
print(unique(students$lunch))
print(unique(students$test_preparation_course))
# 고유값 확인 후, 부모님의 교육 수준을 순서형 변수로 변환
# 실제 데이터에 맞는 레벨을 사용
students$parental_level_of_education <- as.numeric(factor(students$parental_level_of_education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 데이터 프레임의 모든 컬럼 이름 출력
print(colnames(students))
# 고유값 확인
print(unique(students$parental_level_of_education))
print(unique(students$lunch))
print(unique(students$test_preparation_course))
# 고유값 확인 후, 부모님의 교육 수준을 순서형 변수로 변환
# 실제 데이터에 맞는 레벨을 사용
students$parental_level_of_education <- as.numeric(factor(students$parental_level_of_education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 데이터 프레임의 모든 컬럼 이름 출력
print(colnames(students))
# 실제 데이터에 맞는 레벨을 사용
students$parental.level.of.education <- as.numeric(factor(students$parental.level.of.education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 점심 유형: 이진 변수로 변환 ('standard' = 1, 'free/reduced' = 0)
students$lunch <- ifelse(students$lunch == "standard", 1, 0)
# 시험 준비 과정: 이진 변수로 변환 ('none' = 0, 'completed' = 1)
students$test.preparation.course <- ifelse(students$test.preparation.course == "none", 0, 1)
# 변환된 데이터셋에서 수학 성적, 부모님의 교육 수준, 점심 유형, 시험 준비 과정만 선택
students_n <- students[, c("math.score", "parental.level.of.education", "lunch", "test.preparation.course")]
# 상관 분석
students_cor <- cor(students_n, use = "complete.obs") # NA 값을 처리하기 위해 use = "complete.obs" 사용
# 상관 분석 결과 확인
print(students_cor)
# corrplot 패키지 설치 및 불러오기
if(!require(corrplot)) {
install.packages("corrplot")
}
library(corrplot)
# 상관 분석 결과 시각화
corrplot(students_cor)
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
# 실제 데이터에 맞는 레벨을 사용 / 부모님의 교육 수준을 순서형 변수로 변환
students$parental.level.of.education <- as.numeric(factor(students$parental.level.of.education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 점심 유형: 이진 변수로 변환 ('standard' = 1, 'free/reduced' = 0)
students$lunch <- ifelse(students$lunch == "standard", 1, 0)
# 시험 준비 과정: 이진 변수로 변환 ('none' = 0, 'completed' = 1)
students$test.preparation.course <- ifelse(students$test.preparation.course == "none", 0, 1)
# 변환된 데이터셋에서 수학 성적, 부모님의 교육 수준, 점심 유형, 시험 준비 과정만 선택
students_n <- students[, 3:6]
# 상관 분석
students_cor <- cor(students_n, use = "complete.obs") # NA 값을 처리하기 위해 use = "complete.obs" 사용
# 상관 분석 결과 확인
print(students_cor)
# corrplot 패키지 설치 및 불러오기
if(!require(corrplot)) {
install.packages("corrplot")
}
library(corrplot)
# 상관 분석 결과 시각화
corrplot(students_cor)
# 상관 분석
students_cor <- cor(students_n)
students_cor
students_cor
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
head(students)
head(students)
str(students)
head(students)
students_n <- students[, 3:6]
head(students_n)
students_cor <- cor(students_n)
students_n <- students[, 3:6]
head(students_n)
students_cor <- cor(students_n)
students_n <- students[, c("math.score", "parental.level.of.education", "lunch", "test.preparation.course")]
head(students_n)
# 상관 분석
students_cor <- cor(students_n)
students_n <- students[, c("math.score", "parental.level.of.education", "lunch", "test.preparation.course")]
head(students_n)
students_cor <- cor(students_n)
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
head(students)
str(students)
# 실제 데이터에 맞는 레벨을 사용 / 부모님의 교육 수준을 순서형 변수로 변환
students$parental.level.of.education <- as.numeric(factor(students$parental.level.of.education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 점심 유형: 이진 변수로 변환 ('standard' = 1, 'free/reduced' = 0)
students$lunch <- ifelse(students$lunch == "standard", 1, 0)
# 시험 준비 과정: 이진 변수로 변환 ('none' = 0, 'completed' = 1)
students$test.preparation.course <- ifelse(students$test.preparation.course == "none", 0, 1)
# 변환된 데이터셋에서 수학 성적, 부모님의 교육 수준, 점심 유형, 시험 준비 과정만 선택
students_n <- students[, c("math.score", "parental.level.of.education", "lunch", "test.preparation.course")]
head(students_n)
# 상관 분석
students_cor <- cor(students_n)
students_cor
# 상관 분석 결과 확인
print(students_cor)
# corrplot 패키지 설치 및 불러오기
if(!require(corrplot)) {
install.packages("corrplot")
}
library(corrplot)
# 상관 분석 결과 시각화
corrplot(students_cor)
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
head(students)
str(students)
# 실제 데이터에 맞는 레벨을 사용 / 부모님의 교육 수준을 순서형 변수로 변환
students$parental.level.of.education <- as.numeric(factor(students$parental.level.of.education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 점심 유형: 이진 변수로 변환 ('standard' = 1, 'free/reduced' = 0)
students$lunch <- ifelse(students$lunch == "standard", 1, 0)
# 시험 준비 과정: 이진 변수로 변환 ('none' = 0, 'completed' = 1)
students$test.preparation.course <- ifelse(students$test.preparation.course == "none", 0, 1)
# 변환된 데이터셋에서 수학 성적, 부모님의 교육 수준, 점심 유형, 시험 준비 과정만 선택
students_n <- students[, 3:6]
head(students_n)
# 상관 분석
students_cor <- cor(students_n)
students_cor
# 상관 분석 결과 확인
print(students_cor)
# corrplot 패키지 설치 및 불러오기
if(!require(corrplot)) {
install.packages("corrplot")
}
library(corrplot)
# 상관 분석 결과 시각화
corrplot(students_cor)
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
head(students)
str(students)
# 실제 데이터에 맞는 레벨을 사용 / 부모님의 교육 수준을 순서형 변수로 변환
students$parental.level.of.education <- as.numeric(factor(students$parental.level.of.education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
# 점심 유형: 이진 변수로 변환 ('standard' = 1, 'free/reduced' = 0)
students$lunch <- ifelse(students$lunch == "standard", 1, 0)
# 시험 준비 과정: 이진 변수로 변환 ('none' = 0, 'completed' = 1)
students$test.preparation.course <- ifelse(students$test.preparation.course == "none", 0, 1)
# 변환된 데이터셋에서 수학 성적, 부모님의 교육 수준, 점심 유형, 시험 준비 과정만 선택
students_n <- students[, c("math.score", "parental.level.of.education", "lunch", "test.preparation.course")]
head(students_n)
# 상관 분석
students_cor <- cor(students_n)
students_cor
# 상관 분석 결과 확인
print(students_cor)
# corrplot 패키지 설치 및 불러오기
if(!require(corrplot)) {
install.packages("corrplot")
}
library(corrplot)
# 상관 분석 결과 시각화
corrplot(students_cor)
# 실제 데이터에 맞는 레벨을 사용 / 부모님의 교육 수준을 순서형 변수로 변환
students$parental.level.of.education <- as.numeric(factor(students$parental.level.of.education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
students$parental.level.of.education
students <- read.csv("StudentsPerformance.csv", header = TRUE)
head(students)
str(students)
# 실제 데이터에 맞는 레벨을 사용 / 부모님의 교육 수준을 순서형 변수로 변환
students$parental.level.of.education <- as.numeric(factor(students$parental.level.of.education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
students$parental.level.of.education
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
head(students)
str(students)
# 실제 데이터에 맞는 레벨을 사용 / 부모님의 교육 수준을 순서형 변수로 변환
students$parental.level.of.education <- as.numeric(factor(students$parental.level.of.education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
students$parental.level.of.education
# 점심 유형: 이진 변수로 변환 ('standard' = 1, 'free/reduced' = 0)
students$lunch <- ifelse(students$lunch == "standard", 1, 0)
students$lunch
# 시험 준비 과정: 이진 변수로 변환 ('none' = 0, 'completed' = 1)
students$test.preparation.course <- ifelse(students$test.preparation.course == "none", 0, 1)
students$test.preparation.course
# 상관 분석
students_cor <- cor(students_n)
students_cor
# 상관 분석 결과 확인
print(students_cor)
# 상관 분석 결과 시각화
corrplot(students_cor, method="circle", type="upper", addCoef.col = "white")
# 데이터 불러오기
students <- read.csv("StudentsPerformance.csv", header = TRUE)
head(students)
str(students)
# 실제 데이터에 맞는 레벨을 사용 / 부모님의 교육 수준을 순서형 변수로 변환
students$parental.level.of.education <- as.numeric(factor(students$parental.level.of.education, levels = c("some high school", "high school", "some college", "associate's degree", "bachelor's degree", "master's degree")))
students$parental.level.of.education
# 점심 유형: 이진 변수로 변환 ('standard' = 1, 'free/reduced' = 0)
students$lunch <- ifelse(students$lunch == "standard", 1, 0)
students$lunch
# 시험 준비 과정: 이진 변수로 변환 ('none' = 0, 'completed' = 1)
students$test.preparation.course <- ifelse(students$test.preparation.course == "none", 0, 1)
students$test.preparation.course
# 변환된 데이터셋에서 수학 성적, 부모님의 교육 수준, 점심 유형, 시험 준비 과정만 선택
students_n <- students[, 3:6]
head(students_n)
# 상관 분석
students_cor <- cor(students_n)
students_cor
# corrplot 패키지 설치 및 불러오기
#install.packages("corrplot")
library(corrplot)
# 상관 분석 결과 시각화
corrplot(students_cor, method="circle", type="upper", addCoef.col = "white")
# 데이터셋 불러오기
diabetes_data <- read.csv("diabetes.csv", header = TRUE)
# 데이터셋의 앞부분 확인
head(diabetes_data)
# 로지스틱 회귀 모델 생성
logistic_model <- glm(Outcome ~ ., data = diabetes_data, family = binomial)
# 모델 요약
summary(logistic_model)
# 새로운 데이터 생성 (예: 고수정 설문 결과)
new_data <- data.frame(rbind(c(5, 116, 74, 0, 0, 25.6, 0.201, 30)))  # 예시 데이터
# 변수 이름 부여
names(new_data) <- names(diabetes_data)[1:8]
# 새로운 데이터 확인
new_data
# 새로운 데이터에 대한 예측 수행
predicted_prob <- predict(logistic_model, new_data, type = "response")
# 예측 결과 출력
predicted_prob
# 예측 결과를 0 또는 1로 반올림
predicted_outcome <- round(predicted_prob, 0)
# 예측 결과를 새로운 데이터에 추가
new_data$Outcome <- predicted_outcome
# 최종 예측 결과 확인
new_data
# 데이터셋 불러오기
diabetes_data <- read.csv("diabetes.csv", header = TRUE)
# 데이터셋의 앞부분 확인
head(diabetes_data)
# 로지스틱 회귀 모델 생성
logistic_model <- glm(Outcome ~ ., data = diabetes_data)
logistic_model
# 새로운 데이터 생성 (예: 고수정 설문 결과)
new_data <- data.frame(rbind(c(5, 116, 74, 0, 0, 25.6, 0.201, 30)))  # 예시 데이터
new_data
# 데이터셋의 앞부분 확인
head(diabetes_data)
new_data <- data.frame(rbind(c(2, 123, 50, 0, 0, 32.6, 0.123, 22)))  # 예시 데이터
new_data
# 변수 이름 부여
names(new_data) <- names(diabetes_data)[1:8]
new_data
# 데이터셋 불러오기
diabetes_data <- read.csv("diabetes.csv", header = TRUE)
# 데이터셋의 앞부분 확인
head(diabetes_data)
# 로지스틱 회귀 모델 생성
logistic_model <- glm(Outcome ~ ., data = diabetes_data)
logistic_model
# 새로운 데이터 생성 (예: 고수정 설문 결과)
new_data <- data.frame(rbind(c(2, 123, 50, 0, 0, 32.6, 0.123, 22)))  # 예시 데이터
new_data
# 변수 이름 부여
names(new_data) <- names(diabetes_data)[1:8]
new_data
# 새로운 데이터에 대한 예측 수행
predicted_prob <- predict(logistic_model, new_data)
# 예측 결과 출력
predicted_prob
# 예측 결과를 0 또는 1로 반올림
predicted_outcome <- round(predicted_prob, 0)
# 예측 결과를 새로운 데이터에 추가
new_data$Outcome <- predicted_outcome
# 최종 예측 결과 확인
new_data
# 데이터셋 불러오기
diabetes_data <- read.csv("diabetes.csv", header = TRUE)
# 데이터셋의 앞부분 확인
head(diabetes_data)
# 로지스틱 회귀 모델 생성
logistic_model <- glm(Outcome ~ ., data = diabetes_data)
logistic_model
# 새로운 데이터 생성
new_data <- data.frame(rbind(c(5, 116, 74, 0, 0, 25.6, 0.201, 30)))  # 예시 데이터
new_data
# 변수 이름 부여
names(new_data) <- names(diabetes_data)[1:8]
new_data
# 새로운 데이터에 대한 예측 수행
predicted_prob <- predict(logistic_model, new_data)
# 예측 결과 출력
predicted_prob
# 예측 결과를 0 또는 1로 반올림
predicted_outcome <- round(predicted_prob, 0)
# 예측 결과를 새로운 데이터에 추가
new_data$Outcome <- predicted_outcome
# 최종 예측 결과 확인
new_data
# 데이터셋 불러오기
diabetes_data <- read.csv("diabetes.csv", header = TRUE)
# 데이터셋의 앞부분 확인
head(diabetes_data)
# 로지스틱 회귀 모델 생성
logistic_model <- glm(Outcome ~ ., data = diabetes_data)
logistic_model
# 새로운 데이터 생성
new_data <- data.frame(rbind(c(2, 123, 50, 0, 0, 32.6, 0.123, 22)))  # 예시 데이터
new_data
# 변수 이름 부여
names(new_data) <- names(diabetes_data)[1:8]
new_data
# 새로운 데이터에 대한 예측 수행
predicted_prob <- predict(logistic_model, new_data)
# 예측 결과 출력
predicted_prob
# 예측 결과를 0 또는 1로 반올림
predicted_outcome <- round(predicted_prob, 0)
# 예측 결과를 새로운 데이터에 추가
new_data$Outcome <- predicted_outcome
# 최종 예측 결과 확인
new_data
# 데이터셋 불러오기
diabetes_data <- read.csv("diabetes.csv", header = TRUE)
# 데이터셋의 앞부분 확인
head(diabetes_data)
# 로지스틱 회귀 모델 생성
logistic_model <- glm(Outcome ~ ., data = diabetes_data)
logistic_model
# 새로운 데이터 생성
new_data <- data.frame(rbind(c(2, 123, 50, 0, 0, 32.6, 0.123, 22)))  # 예시 데이터
new_data
# 변수 이름 부여
names(new_data) <- names(diabetes_data)[1:8]
new_data
# 새로운 데이터에 대한 예측 수행
pred <- predict(logistic_model, new_data)
# 예측 결과 출력
pred
# 예측 결과를 0 또는 1로 반올림
predicted_outcome <- round(pred, 0)
# 예측 결과를 새로운 데이터에 추가
new_data$Outcome <- predicted_outcome
# 최종 예측 결과 확인
new_data
# 최종 예측 결과 확인
new_data
head(new_data)
# 데이터셋 불러오기
diabetes_data <- read.csv("diabetes.csv", header = TRUE)
# 데이터셋의 앞부분 확인
head(diabetes_data)
# 로지스틱 회귀 모델 생성
logistic_model <- glm(Outcome ~ ., data = diabetes_data)
logistic_model
# 새로운 데이터 생성
new_data <- data.frame(rbind(c(2, 123, 50, 0, 0, 32.6, 0.123, 22)))  # 예시 데이터
new_data
# 변수 이름 부여
names(new_data) <- names(diabetes_data)[1:8]
new_data
# 새로운 데이터에 대한 예측 수행
pred <- predict(logistic_model, new_data)
# 예측 결과 출력
pred
# 예측 결과를 0 또는 1로 반올림
predicted_outcome <- round(pred, 0)
# 예측 결과를 새로운 데이터에 추가
new_data$Outcome <- predicted_outcome
# 최종 예측 결과 확인
new_data
head(diabetes_data)
